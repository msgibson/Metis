# PEERSIM Metis Test Script

# network size
SIZE 100

# parameters of periodic execution
CYCLES 300
#CYCLE SIZE*100
CYCLE 1

# parameters of message transfer
# delay values here are relative to cycle length, in percentage,
# eg 50 means half the cycle length, 200 twice the cycle length, etc.
MINDELAY 0
MAXDELAY 0
# drop is a probability, 0<=DROP<=1
DROP 0

random.seed 1234567890
network.size SIZE
simulation.endtime CYCLE*CYCLES
simulation.logtime CYCLE
 
# === PROTOCOLS === #
protocol.link IdleProtocol

protocol.Metis uk.ac.abdn.csd.metis.p2p.Peer
protocol.Metis.step CYCLE
protocol.Metis.linkable link
protocol.Metis.transport tr

protocol.urt UniformRandomTransport
protocol.urt.mindelay (CYCLE*MINDELAY)/100
protocol.urt.maxdelay (CYCLE*MAXDELAY)/100

protocol.tr UnreliableTransport
protocol.tr.transport urt
protocol.tr.drop DROP

# === INITIALISERS === #

# NOTE: Initialisers are in ALPHABETICAL ORDER,
# NOT ORDER OF APPEARANCE!! Hence number in
# front of name

# Generate topology of the nodes
init.0topology WireFromFile
init.0topology.protocol link
init.0topology.k 4
init.0topology.file topology-n100-k4.txt
init.0topology.undir TRUE

#init.0topology WireKOut
#init.0topology.protocol link
#init.0topology.k 2
#init.0topology.undir TRUE

# Generate each node's ontology, rule set and behaviour
init.1app uk.ac.abdn.csd.metis.p2p.InitApp
init.1app.protocol Metis
init.1app.ontology metis.owl
init.1app.rules metis.rules
init.1app.prefix http://www.abdn.ac.uk/metis.owl # Don't forget the # in the program since it is treated as a comment here!
init.1app.width 10
init.1app.height 10

# Chances of a player having patient behaviour
init.1app.impatient 25
init.1app.semipatient 50
init.1app.patient 25

# Chance of a player having high performance
init.1app.lowperformance 25
init.1app.medperformance 50
init.1app.highperformance 25

# Chances of a player having helpful behaviour
init.1app.nothelpful 25
init.1app.semihelpful 50
init.1app.helpful 25

# Chances of a player having coordinating behaviour
init.1app.notcoord 25
init.1app.semicoord 50
init.1app.coord 25

# Put neighbours of a node into the ontology
init.2neighbours uk.ac.abdn.csd.metis.p2p.InitNeighbours
init.2neighbours.protocol Metis

# Run the application
init.3sch CDScheduler
init.3sch.protocol Metis

# === OBSERVERS === #
#control.node uk.ac.abdn.csd.metis.p2p.NodeObserver
#control.node.protocol link
#control.node.step CYCLE

#control.peer uk.ac.abdn.csd.metis.p2p.PeerObserver
#control.peer.protocol Metis
#control.peer.step CYCLE

#control.mem MemoryObserver
#control.mem.protocol Metis
#control.mem.step CYCLE

control.end uk.ac.abdn.csd.metis.p2p.WriteResults
control.end.protocol Metis
control.end.step CYCLE
control.end.FINAL true

#control.happy uk.ac.abdn.csd.metis.p2p.PlotHappiness
#control.happy.protocol Metis
#control.happy.step CYCLE
#control.happy.FINAL true